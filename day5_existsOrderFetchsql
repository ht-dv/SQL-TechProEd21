

CREATE TABLE mart_satislar
    (
        urun_id number(10),
        musteri_isim varchar2(50),
        urun_isim varchar2(50)
    );
    
    CREATE TABLE nisan_satislar
    (
        urun_id number(10),
        musteri_isim varchar2(50),
        urun_isim varchar2(50)
    );
    
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (10, 'Mark', 'Honda');
    INSERT INTO mart_satislar VALUES (20, 'John', 'Toyota');
    INSERT INTO mart_satislar VALUES (30, 'Amy', 'Ford');
    INSERT INTO mart_satislar VALUES (20, 'Mark', 'Toyota');
    INSERT INTO mart_satislar VALUES (10, 'Adem', 'Honda');
    INSERT INTO mart_satislar VALUES (40, 'John', 'Hyundai');
    INSERT INTO mart_satislar VALUES (20, 'Eddie', 'Toyota');
    
    INSERT INTO nisan_satislar VALUES (10, 'Hasan', 'Honda');
    INSERT INTO nisan_satislar VALUES (10, 'Kemal', 'Honda');
    INSERT INTO nisan_satislar VALUES (20, 'Ayse', 'Toyota');
    INSERT INTO nisan_satislar VALUES (50, 'Yasar', 'Volvo');
    INSERT INTO nisan_satislar VALUES (20, 'Mine', 'Toyota');
    
    SELECT * FROM mart_satislar;
    SELECT * FROM nisan_satislar;
    
-- ORNEK 1 --
-- MART VE NÝSAN aylarinda ayni URUN_ID ile satilan urunlerin URUN_ID’lerini listeleyen ve ayni zamanda bu urunleri MART ayinda alan MUSTERI_ISIM 'lerini listeleyen bir sorgu yaziniz.
    
    SELECT urun_id, musteri_isim FROM mart_satislar WHERE /*urun_id IN yerine exists yazariz*/ EXISTS (SELECT urun_id FROM nisan_satislar WHERE mart_satislar.urun_id=nisan_satislar.urun_id);
    
-- ORNEK 2 --
-- Her iki ayda da satilan urunlerin URUN_ISIM'lerini ve bu urunleri NÝSAN ayinda satin alan MUSTERI_ISIM'lerini listeleyen bir sorgu yaziniz.
    
    SELECT urun_isim, musteri_isim FROM nisan_satislar nis WHERE EXISTS (SELECT urun_isim FROM mart_satislar mar WHERE mar.urun_isim=nis.urun_isim);

-- ORNEK 3 --
-- Her iki ayda da ortak olarak satilmayan ürünlerin URUN_ISIM'lerini ve bu urunleri NÝSAN ayinda satin alan MUSTERI_ISIM'lerini listeleyiniz.

    SELECT urun_isim, musteri_isim FROM nisan_satislar n WHERE NOT EXISTS (SELECT urun_isim FROM mart_satislar m WHERE m.urun_isim=n.urun_isim);
    
    
/*===================== IS NULL, IS NOT NULL, COALESCE(kulesk=birleþmek) ========================
    IS NULL, ve IS NOT NULL BOOLEAN operatörleridir. Bir ifadenin NULL olup
    olmadýðýný kontrol ederler.
==============================================================================*/
    CREATE TABLE insanlar
    (
        ssn CHAR(9),
        isim VARCHAR2(50),
        adres VARCHAR2(50)
    );
    
    INSERT INTO insanlar VALUES('123456789', 'Ali Can', 'Istanbul');
    INSERT INTO insanlar VALUES('234567890', 'Veli Cem', 'Ankara');
    INSERT INTO insanlar VALUES('345678901', 'Mine Bulut', 'Izmir');
    INSERT INTO insanlar (ssn, adres) VALUES('456789012', 'Bursa');
    INSERT INTO insanlar (ssn, adres) VALUES('567890123', 'Denizli');
    INSERT INTO insanlar (adres) VALUES('Sakarya');
    INSERT INTO insanlar (ssn) VALUES('999111222');
    
    SELECT * FROM insanlar;
    
-- ORNEK 1 --
-- isim'in null olanlari sorgulayiniz.
    
    SELECT * FROM insanlar WHERE isim IS NULL;
    
-- ORNEK 2 --
-- isim'in null olmayanlari sorgulayiniz.

    SELECT * FROM insanlar WHERE isim IS NOT NULL;
    
-- ORNEK 3 --
-- isim 'i NULL olan kisilerin isim'ine NO NAME atayiniz.

    UPDATE insanlar SET isim='NO NAME' WHERE isim IS NULL;

    SELECT COALESCE (isim, ssn, adres) FROM insanlar; -- null olan kisimda bir sonrakine atliyor. Mesela Ali Can, Veli Cem yazdi, 3. satirdaki isim null ise bize 3. satirin ssn'ni getirir. Yani null disinda buldugu ilk veriyi donduruyor.

  /* COALESCE (birleþmek) ise bir fonksiyondur ve içerisindeki parameterelerden NULL olmayan
    ilk ifadeyi döndürür. Eðer aldýðý tüm ifadeler NULL ise NULL döndürürür.
   *** select COALESCE (sütun1,sütun2,...) from tabloAdý;
    Birden fazla null koþuluna göre deðer atamak istiyorsak COALESCE deyimini kullanabiliriz.
    COALESCE aslýnda case mantýðýnda çalýþýr ve birden fazla kolon arasýnda kontrol saðlayabilirsiniz.
    Bir koþul gerçekleþmez ise diðerine bakar, oda gerçekleþmez ise bir sonraki.
    Deyim bitene kadar
   -- CASE
   WHEN (expression1 IS NOT NULL) THEN expression1
   WHEN (expression2 IS NOT NULL) THEN expression2
   ...
   ELSE expressionN
   END  --gibi*/
     UPDATE insanlar SET isim=COALESCE (isim, 'henuz isim girilmedi'), adres=COALESCE (adres, 'henuz adres girilmedi'), ssn=COALESCE (ssn, 'NO SSN');
    
    SELECT * FROM insanlar;
    
/* ================================ ORDER BY  ===================================
   ORDER BY cümleciði bir SORGU deyimi içerisinde belli bir SUTUN’a göre
   SIRALAMA yapmak için kullanýlýr.
   Syntax
   -------
      ORDER BY sutun_adi ASC   -- ARTAN
      ORDER BY sutun_adi DESC  -- AZALAN
========================================= */
    
    CREATE TABLE kisiler
    (
        ssn CHAR(9) PRIMARY KEY,
        isim VARCHAR2(50),
        soyisim VARCHAR2(50),
        maas NUMBER,
        adres VARCHAR2(50)
    );
    
    INSERT INTO kisiler VALUES(123456789, 'Ali','Can', 3000,'Istanbul');
    INSERT INTO kisiler VALUES(234567890, 'Veli','Cem', 2890,'Ankara');
    INSERT INTO kisiler VALUES(345678901, 'Mine','Bulut',4200,'Ankara');
    INSERT INTO kisiler VALUES(256789012, 'Mahmut','Bulut',3150,'Istanbul');
    INSERT INTO kisiler VALUES (344678901, 'Mine','Yasa', 5000,'Ankara');
    INSERT INTO kisiler VALUES (345458901, 'Veli','Yilmaz',7000,'Istanbul');
    
    SELECT * FROM kisiler;
    
-- ORNEK 1 --
-- Kisiler tablosunu adres'e gore siralayarak sorgulayiniz.
    SELECT * FROM kisiler ORDER BY adres;
    
-- ORNEK 2 --
-- Kisiler tablosunu maas'a gore AZALAN (DESC) sirada sorgulayiniz.
    SELECT * FROM kisiler ORDER BY maas DESC;
    
-- ORNEK 3 --
-- Ismi Mine olanlarý, SSN'e gore AZALAN (DESC) sirada sorgulayiniz.
    SELECT * FROM kisiler WHERE isim='Mine' ORDER BY ssn DESC;
    
-- ORNEK 5 --
-- Soyismi 'i Bulut olanlari isim sirali olarak sorgulayiniz.
    SELECT * FROM kisiler WHERE soyisim='Bulut' ORDER BY 2; -- isim yerine ismin sutun sirasi olan 2'yi kullanbiliriz.
    
/*====================== FETCH NEXT, OFFSET (12C VE ÜSTÜ oracle larda çalýþýr, daha altsanýz çalýþmaz) ======================
   FETCH cümleciði ile listelenecek kayýtlarý sýnýrlandýrabiliriz. Ýstersek
   satýr sayýsýna göre istersek de toplam satýr sayýsýnýn belli bir yüzdesine
   göre sýnýrlandýrma koymak mümkündür. (þu kadar satýrý getir)
   Syntax
   ---------
   FETCH NEXT satir_sayisi ROWS ONLY;
   FETCH NEXT satir_yuzdesi PERCENT ROWS ONLY;
   OFFSET Cümleciði ile de listenecek olan satýrlardan sýrasýyla istediðimiz
   kadarýný atlayabiliriz.
   Syntax
   ----------
   OFFSET satýr_sayisi ROWS;
==============================================================================*/

-- ORNEK 1 -- MAAS'i en yüksek 3 kisinin bilgilerini listeleyen sorguyu yaziniz.
    
    SELECT * FROM kisiler ORDER BY maas DESC FETCH NEXT 3 ROWS ONLY;
    
    SELECT * FROM (SELECT * FROM kisiler ORDER BY maas DESC) WHERE ROWNUM < 4; --(1) kisilerde maasa göre ters sirala / ESKI YONTEM BU
    
-- ORNEK 2 --
-- MAAS'Ý en DUSUK 2 kisinin bilgilerini listeleyen sorguyu yaziniz.

    SELECT * FROM kisiler ORDER BY maas FETCH NEXT 2 ROWS ONLY;

    SELECT * FROM (SELECT * FROM kisiler ORDER BY maas) WHERE ROWNUM < 3; -- ESKI YONTEM BU
    
-- ORNEK 3 --
-- MAAS'a gore siralamada 4. 5. ve 6. kisilerin bilgilerini listeleyen sorguyu yaziniz.

    SELECT * FROM kisiler ORDER BY maas DESC OFFSET 3 ROWS FETCH NEXT 3 ROWS ONLY;
    
    SELECT * FROM (SELECT * FROM (SELECT * FROM   kisiler ORDER BY maas DESC) WHERE ROWNUM <=6) WHERE  ROWNUM <=3; -- ESKI YONTEM BU





    
    